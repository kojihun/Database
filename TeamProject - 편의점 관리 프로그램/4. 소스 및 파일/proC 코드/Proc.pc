// win32 Visual C 컴파일시 추가
// 프로그램 가장 첫 줄에 추가할 것
#define _CRT_SECURE_NO_WARNINGS

#include <stdlib.h>
#include <stdio.h>
#include <ctype.h>
#include <string.h>
#include <conio.h>
#include <windows.h>

/* for oracle */
#include <sqlda.h>
#include <sqlca.h>
#include <sqlcpr.h>

#define CLS system("cls")


void DB_connect();
void new_del_dis();
void distribution();
void owner_location();
void login();
void get_bill();
void while_check();
void product_provision();
void employee_search();
void sql_error(char *msg);
void insert_employee();
void delete_employee();
void file_print(int number);
void chk_employee();


EXEC SQL BEGIN DECLARE SECTION;
	VARCHAR uid[80];
	VARCHAR pwd[20];
EXEC SQL END DECLARE SECTION;

#define getch()  _getch()

void main() {

	DB_connect();   

	file_print(0);
	owner_location();
	login();
   
	while_check();
	getch();
}


void while_check(){
	
	int check_num = 0;
	//char test;

	printf("\n\n");

	CLS;

	printf("\n\n 1. 계산 하기\n 2. 매장 물건조회\n 3. 본점에만 있는 물건 조회\n 4. 재고 관리 \n 5. 직원 관리 \n 6. POS기 종료\n");
	printf("\n 원하는 기능을 입력 해주세요 : ");

	scanf("%d", &check_num);
	//scnaf("%c", &test);
	fflush(stdin);

	if (check_num == 1){
		CLS;
		file_print(check_num);
		get_bill();
	}
	else if (check_num == 2){
		CLS;
		file_print(check_num);
		distribution();
	}
	else if (check_num == 3){
		CLS;
		file_print(check_num);
		new_del_dis();
	}
	else if (check_num == 4){
		CLS;
		file_print(check_num);
		product_provision();
	}
	else if (check_num == 5){
		CLS;
		file_print(check_num);
		chk_employee();
	}
	else if (check_num == 6){
		exit(-1);
	}
	else {
		printf(" 항목에 없는 번호 입니다...\n");
		while_check();
	}

}

void file_print(int number)
{
	/* 파일 입출력 부분 수많은 printf문 방지 */
	FILE *read_file;
	int index;
	int data;
	int num_chk = number;
	if (num_chk == 1) // 계산기능
		read_file = fopen("calculate.txt", "r"); 
	else if (num_chk == 2) // 매장 물건 조회
		read_file = fopen("searchStuff.txt", "r");
	else if (num_chk == 3) // 본점에만 있는 물건 조회
		read_file = fopen("companyStuff.txt", "r");
	else if (num_chk == 4) // 재고 관리
		read_file = fopen("manageStuff.txt", "r");
	else if (num_chk == 5) // 직원 조회
		read_file = fopen("searchEmp.txt", "r");
	else
		read_file = fopen("start.txt", "r");
	
	while(fscanf(read_file, "%c", &data) != EOF){
		printf("%c", data);
	}
	fclose(read_file);

}



void insert_employee(){
	
	EXEC SQL BEGIN DECLARE SECTION;
		varchar staffgradeP[10];
		varchar staffidP[10];
		varchar staffnameP[10];
		varchar staffageP[10];
		varchar staffsexP[10];
		varchar staffattendenceP[30]; //날짜
		varchar staffacnumP[20];
		varchar staffaddrP[20];
		varchar stafftelP[20]; 

		short staffgradeP_ind;
		short staffidP_ind;
		short staffnameP_ind;
		short staffageP_ind;
		short staffsexP_ind;
		short staffattendenceP_ind;
		short staffacnumP_ind;
		short staffaddrP_ind;
		short stafftelP_ind;
	
		char insertgradeP[10];
		char insertidP[10];
		char insertnameP[10];
		char insertageP[10];
		char insertsexP[10];
		char insertattendenceP[30]; //날짜
		char insertacnumP[20];
		char insertaddrP[20];
		char inserttelP[20]; 
	EXEC SQL END DECLARE SECTION;

	memset(&staffgradeP, 0x00, sizeof(staffgradeP));
	memset(&staffidP, 0x00, sizeof(staffidP));
	memset(&staffnameP, 0x00, sizeof(staffnameP));
	memset(&staffageP, 0x00, sizeof(staffageP));
	memset(&staffsexP, 0x00, sizeof(staffsexP));
	memset(&staffattendenceP, 0x00, sizeof(staffattendenceP));
	memset(&staffacnumP, 0x00, sizeof(staffacnumP));
	memset(&staffaddrP, 0x00, sizeof(staffaddrP));
	memset(&stafftelP, 0x00, sizeof(stafftelP));

	staffgradeP_ind = 0;
	staffidP_ind = 0;
	staffnameP_ind = 0;
	staffageP_ind = 0;
	staffsexP_ind = 0;
	staffattendenceP_ind = 0;
	staffacnumP_ind = 0;
	staffaddrP_ind = 0;
	stafftelP_ind = 0;
	//getch();
	//fflush(stdin);
	gets(insertgradeP);
	printf("\n 직급을 입력하세요:");
	gets(insertgradeP);
	printf(" 아이디를 입력하세요:");
	gets(insertidP);
	printf(" 이름을 입력하세요:");
	gets(insertnameP);
	printf(" 나이를 입력하세요:");
	gets(insertageP);
	printf(" 성별을 입력하세요:");
	gets(insertsexP);
	printf(" 입사입을 입력하세요:");
	gets(insertattendenceP);
	printf(" 계좌번호를 입력하세요:");
	gets(insertacnumP);
	printf(" 주소를 입력하세요:");
	gets(insertaddrP);
	printf(" 전화번호를 입력하세요:");
	gets(inserttelP);

	strcpy((char*)staffgradeP.arr, insertgradeP);
	staffgradeP.len =  strlen(staffgradeP.arr);

	strcpy((char*)staffidP.arr, insertidP);
	staffidP.len =  strlen(staffidP.arr);

	strcpy((char*)staffnameP.arr, insertnameP);
	staffnameP.len =  strlen(staffnameP.arr);

	strcpy((char*)staffageP.arr, insertageP);
	staffageP.len =  strlen(staffageP.arr);

	strcpy((char*)staffsexP.arr, insertsexP);
	staffsexP.len =  strlen(staffsexP.arr);

	strcpy((char*)staffattendenceP.arr, insertattendenceP);
	staffattendenceP.len =  strlen(staffattendenceP.arr);

	strcpy((char*)staffacnumP.arr, insertacnumP);
	staffacnumP.len =  strlen(staffacnumP.arr);

	strcpy((char*)staffaddrP.arr, insertaddrP);
	staffaddrP.len =  strlen(staffaddrP.arr);

	strcpy((char*)stafftelP.arr, inserttelP);
	stafftelP.len =  strlen(stafftelP.arr);


	EXEC SQL
		INSERT INTO employee(
			staff_grade,
			staff_id,
			staff_name,
			staff_age,
			staff_sex,
			staff_attendence,
			staff_acnum,
			staff_addr,
			staff_tel
		)
		values(
			:staffgradeP:staffgradeP_ind,
			:staffidP:staffidP_ind,
			:staffnameP:staffnameP_ind,
			:staffageP:staffageP_ind,
			:staffsexP:staffsexP_ind,
			:staffattendenceP:staffattendenceP_ind,
			:staffacnumP:staffacnumP_ind,
			:staffaddrP:staffaddrP_ind,
			:stafftelP:stafftelP_ind
		);
	EXEC SQL COMMIT WORK;
	printf(" 직원등록완료!\n");
	chk_employee();
	getch();
}


void login(){
	printf("\n 직원 아이디를 입력해주세요:");

	EXEC SQL BEGIN DECLARE SECTION;
		char staff_id[10];
		char staffgradeP[10];
		char staffidP[10];
		char staffnameP[10];
		char staffgrade[10];
	EXEC SQL END DECLARE SECTION;

	scanf("%s", staff_id);

	EXEC SQL select staff_grade, staff_id, staff_name into :staffgradeP , :staffidP, :staffnameP
	from employee where staff_grade != 'owner' AND staff_id = :staff_id;

	if(strcmp(staffgradeP, "owner    ") == 0 || strcmp(staffgradeP, "manager  ") == 0 || 
		strcmp(staffgradeP, "parttime ") == 0){
		printf("\n [직원정보] 직급 : %s  아이디 : %s  이름 : %s\n",staffgradeP, staffidP, staffnameP);
		getch();
	}
	else {
		printf(" 등록 되지 않는 ID입니다...\n");
		login();
	}
}

void owner_location(){
	printf(" CU편의점에 오신것을 환영합니다.\n");
	printf("\n POS기에 접속하기위한 아이디를 입력해주세요:");
   
	EXEC SQL BEGIN DECLARE SECTION;
		char staffnameP[10];
		char locationP[5];
		char locationH[10];
		char staffsex[2];
		char owner_id[10];

	EXEC SQL END DECLARE SECTION;

	scanf("%s", owner_id);

	EXEC SQL select staff_name, office_location, staff_sex into :staffnameP, :locationP, :staffsex
      
	from owner_location where staff_id = :owner_id;


	if (strcmp(staffsex, "M") == 0 || strcmp(staffsex, "F") == 0){
		printf("\n ★환영합니다★ %s \n",staffnameP);
		printf("\n 지점명:%s POS기에 접속했습니다.\n", locationP);
	}
	else{
		printf("\n 존재하지 않는 ID 입니다 다시 입력 해주세요 \n ");
		owner_location();
	}   
}

void new_del_dis(){
	
	printf("\n 매장에 없는 물건(본사에만 존재) \n");
    
	EXEC SQL BEGIN DECLARE SECTION;
		varchar category[10];
		varchar dis_name[15];

		short category_ind;
		short dis_name_ind;

		EXEC SQL END DECLARE SECTION;

	memset (&dis_name, 0x00, sizeof(dis_name));
	memset (&category, 0x00, sizeof(category));

	category_ind = 0;
	dis_name_ind = 0;

	EXEC SQL DECLARE del_dis_cur CURSOR FOR
		select Hproduct_category, Hproduct_name
		from del_dis;

	EXEC SQL OPEN del_dis_cur;

	EXEC SQL WHENEVER NOT FOUND DO break;

	for( ; ; ){

		EXEC SQL FETCH del_dis_cur into 
			:category:category_ind, 
			:dis_name:dis_name_ind;
      
		printf(" 카테고리 : %s, 물건이름 : %s \n", category.arr, dis_name.arr);

	}
	getch();

	EXEC SQL CLOSE del_dis_cur;
	while_check();
}

void distribution(){
	
	EXEC SQL BEGIN DECLARE SECTION;
		varchar category[20];
		varchar name[20];
		int price;
		varchar expire[20]; 
		int count;
		int event;

		short category_ind = 0;
		short name_ind = 0;
		short price_ind = 0;
		short expire_ind = 0;
		short count_ind = 0;
		short event_ind = 0;

		int category_id = 0;

	EXEC SQL END DECLARE SECTION;

	printf(" 검색 하고자 하는 물건 ID : ");
	scanf("%d", &category_id);

	EXEC SQL DECLARE distribution_cur CURSOR FOR
		select product_category, product_name, product_price, product_expire, product_count,product_event
		from distribution
		where product_id = :category_id;

	EXEC SQL OPEN distribution_cur;

	EXEC SQL WHENEVER NOT FOUND DO break;

	for( ; ; ){

		memset (&category, 0x00, sizeof(category));
		memset (&name, 0x00, sizeof(name));
		memset (&expire, 0x00, sizeof(expire));

		price = 0;
		count = 0;
		event = 0;

		category_ind = 0;
		name_ind = 0;
		price_ind = 0;
		expire_ind = 0;
		count_ind = 0;
		event_ind = 0;

		EXEC SQL FETCH distribution_cur into 
			:category:category_ind, 
			:name:name_ind,
			:price:price_ind,
			:expire:expire_ind,
			:count:count_ind,
			:event:event_ind;
		printf("\n 카테고리 : %s\n 물건이름 : %s\n 가격 : %d\n 유통기한 : %s\n 남은물건 : %d\n 이벤트 여부(0 = X, 1 = O) : %d \n", 

		category.arr, 
		name.arr,
		price,
		expire.arr,
		count,
		event);
	}

	EXEC SQL CLOSE distribution_cur;
	getch();

	while_check();
}


void chk_employee()
{
	
		printf("\n 1. 직원 조회\n 2. 직원 추가\n 3. 직원 삭제\n 4. 돌아가기\n\n 번호를 입력하시오 : ");
		int chk_number = 0;
		scanf("%d", &chk_number);

		if (chk_number == 1){
			employee_search();
		}
		else if (chk_number == 2){
			insert_employee();
		}
		else if (chk_number == 3){
			delete_employee();
		}
		else if (chk_number == 4)
		{
			while_check(); 
		}
			
		else
		{
			printf("\n 잘못된 번호를 입력하셨습니다.");
		}
			

	
}


void get_bill(){
	
	printf("\n\n 계산 기능 시작합니다\n\n");
	int i = 0;
	int total_price = 0;
	char chk = 'y';

		/* 변수 선언 */
	EXEC SQL BEGIN DECLARE SECTION;
		int p_price;
		char nameP[15];
		int pro_id;
		int pro_count = 0;
		int chk_count[6] = {0,};
		int id_value = 0;
	EXEC SQL END DECLARE SECTION;
	
	/* 커서 부분 */
	EXEC SQL DECLARE test_cur CURSOR FOR
		select product_id
		from distribution;
	EXEC SQL OPEN test_cur;
	EXEC SQL WHENEVER NOT FOUND DO break;

	for( ; ; ){
		EXEC SQL FETCH test_cur into :id_value;
		chk_count[i] = id_value;
		i++;
	}

	EXEC SQL CLOSE test_cur;

	for (i = 0 ; i < 6; i++)
	{	
		if (i > 0) 
		{
			printf("\n 물품을 더 구매하시겠습니까?  y or n  ");
			scanf("%c", &chk);
			scanf("%c", &chk);
			printf("\n");
			if(chk == 'n')
			break;
		} 
		int count1 = 0;

		int chk_id = 0;
		while(chk_id == 0)
		{
			printf(" 물품 id 를 입력하세요 : ");
			scanf("%d", &pro_id);

			int j;
			for (j = 0; j < 6; j++)
			{
				if(pro_id == chk_count[j])
					chk_id++;
			}//for end
			if (chk_id == 0)
				printf(" 잘못된 물품 아이디를 입력하셨습니다. 다시 입력하세요\n\n");
		}// id chk while end


		/* 물품 개수 입력받는 부분 */
		while(1){   
			printf(" 물품 개수를 입력하세요 : ");
			scanf("%d", &pro_count);
			if (pro_count > 5)
				printf("\n 너무 많이 살 수 없습니다\n");
			else
				break;
		}

		EXEC SQL select product_price, product_name into :p_price, :nameP
		from distribution
		where product_id = :pro_id;

		total_price += p_price * pro_count;

		EXEC SQL update distribution 
		set product_count = product_count - :pro_count 
		where product_id = :pro_id; /* update 부분  */
		EXEC SQL COMMIT WORK;

		printf("\n 물품 : %s 개당 금액 : %d  합산 : %d 총 금액 : %d\n", nameP, p_price, (p_price * pro_count), total_price);
     
	} // for end

	int exchange = 0;
	int get_money = 0;

	/* 돈을 적게 입력 시 통과하지 못하는 while 문 */
	while(1){
	
		printf("\n 얼마를 받으셨습니까 ? (숫자만 입력하시오)");
		scanf("%d", &get_money);

		exchange = get_money - total_price;

		if(exchange < 0)
			printf("\n 돈을 너무 적게 받았습니다. 받은 금액을 다시 입력하세요.\n");
		else
			break;
	} // while end

	printf("\n 잔돈은 %d원 입니다.\n", exchange);

	getch();

	while_check();
}

void DB_connect() {
	strcpy((char *)uid.arr, "zstB5@//sedb.deu.ac.kr:1521/orcl");
	uid.len = (short) strlen((char *)uid.arr);
	strcpy((char *)pwd.arr, "20191220");
	pwd.len = (short) strlen((char *)pwd.arr);
   
	EXEC SQL CONNECT :uid IDENTIFIED BY :pwd;

	if(sqlca.sqlcode != 0 && sqlca.sqlcode != -1405) { //connect
		printf("\7Connect error: %s ",sqlca.sqlerrm.sqlerrmc);
		getch(); 
		exit(-1);
	}
	
}

void product_provision(){
	
	EXEC SQL BEGIN DECLARE SECTION;
		int select;
		int productidP;
		char productcategoryP[10];
		char productnameP[15];
		int productcountP;

		short productidP_ind;
		short productcategoryP_ind;
		short productnameP_ind;
		short productcountP_ind;

		int select_count;
	EXEC SQL END DECLARE SECTION;

	select = 0;
	select_count = 0;
	printf("\n 1. 현재 물품 리스트 조회\n 2.재고부족 물품 리스트 조회\n 3.물품 입고\n 4.뒤로가기\n");
	printf("\n 번호를 입력해주세요:");
	scanf("%d",&select);

	memset(&productcategoryP, 0x00, sizeof(productcategoryP));
	memset(&productnameP, 0x00, sizeof(productnameP));

	productidP = 0;
	productcountP = 0;

	productidP_ind = 0;
	productcategoryP_ind = 0;
	productnameP_ind = 0;
	productcountP_ind = 0;

	EXEC SQL DECLARE curEmp CURSOR FOR
		select product_id, product_category, product_name, product_count
			from distribution;
	EXEC SQL OPEN curEmp;
	EXEC SQL WHENEVER NOT FOUND DO break;

	for(;;){
		EXEC SQL FETCH curEmp INTO
			:productidP:productidP_ind,
			:productcategoryP:productcategoryP_ind,
			:productnameP:productnameP_ind,
			:productcountP:productcountP_ind;
      
		if(select == 1){
			printf(" 제품아이디 = [%d], 카테고리 = [%s], 제품명 = [%s], 개수 = [%d]\n",productidP, productcategoryP, productnameP, productcountP);
		}

		else if(select == 2){
			if(productcountP<=30){
				printf(" <상품재고부족(O)> 제품아이디 = [%d], 카테고리 = [%s], 제품명 = [%s], 개수 = [%d]\n",productidP, productcategoryP, productnameP, productcountP);
			}
			else{
				printf(" <상품재고부족(X)> 제품아이디 = [%d], 카테고리 = [%s], 제품명 = [%s], 개수 = [%d]\n",productidP, productcategoryP, productnameP, productcountP);
			} 
		}

      
		else if(select == 3){
			printf(" <물품 입고완료>\n");
			EXEC SQL 
				UPDATE distribution 
				SET product_count = 50 where product_count<=30;
			EXEC SQL COMMIT WORK;

		}
		else if(select == 4){
			while_check();
		}
		else {
			printf(" 다시 입력 해주세요 \n");
			product_provision();
		}

	}
	getch();
	product_provision();   
	EXEC SQL CLOSE curEmp;
}


void employee_search(){
	EXEC SQL BEGIN DECLARE SECTION;
		char staffnameP[10];
		char staffsexP[2];
		char stafftelP[14];

		short staffnameP_ind;
		short staffsexP_ind;
		short stafftelP_ind;
	EXEC SQL END DECLARE SECTION;

	memset(&staffnameP, 0x00, sizeof(staffnameP));
	memset(&staffsexP, 0x00, sizeof(staffsexP));
	memset(&stafftelP, 0x00, sizeof(stafftelP));

	staffnameP_ind = 0;
	staffsexP_ind = 0;
	stafftelP_ind = 0;

	EXEC SQL DECLARE curEmp_employee CURSOR FOR
		select staff_name, staff_sex, staff_tel
      from employee;
	EXEC SQL OPEN curEmp_employee;
	EXEC SQL WHENEVER NOT FOUND DO break;

	for(;;){
		EXEC SQL FETCH curEmp_employee INTO
			:staffnameP:staffnameP_ind,
			:staffsexP:staffsexP_ind,
			:stafftelP:stafftelP_ind;

		printf(" 직원이름 = [%s]  성별 = [%s]  전화번호 = [%s]\n",staffnameP, staffsexP, stafftelP);
   }
	EXEC SQL CLOSE curEmp_employee;
	getch();

	chk_employee();
}


void sql_error(char *msg) {
	char err_msg[128];      size_t buf_len, msg_len;
	EXEC SQL WHENEVER SQLERROR CONTINUE;
	printf("\n %s\n",msg);      
	buf_len = sizeof(err_msg);
	sqlglm(err_msg, &buf_len, &msg_len);   
	printf(" %.*s\n",msg_len,err_msg);
	getch();
	EXEC SQL ROLLBACK WORK;
	exit(-1);
}


//직원삭제
void delete_employee(){
	EXEC SQL BEGIN DECLARE SECTION;
		char staffidP[10];
	EXEC SQL END DECLARE SECTION;
   
	memset(&staffidP, 0x00, sizeof(staffidP));

	printf(" 삭제할 직원의 아이디를 입력하세요:");
	gets(staffidP);
	gets(staffidP);

	EXEC SQL CALL delete_employee(:staffidP);
	EXEC SQL COMMIT;


	EXEC SQL WHENEVER SQLERROR CONTINUE;
	printf(" 직원삭제완료!\n");
	chk_employee();
}


